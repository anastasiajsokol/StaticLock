/**
 *  Static Lock Service Worker Key
 *      updated: June 10th, 2023
 *      author: Anastasia Sokol
 *      version: 0.2
**/

if(!self.indexedDB){
    throw new Error("the static lock service worker key can not be registered without the indexedDB api");
}

function getdatabase(name, version = undefined){
    return new Promise(resolve => {
        const request = self.indexedDB.open(name, version);
        request.addEventListener("success", event => {
            return event.target.result;
        }, {
            passive: true,
            once: true
        });

        request.onerror = () => {
            throw new Error("static lock key unable to open indexed database! fatal");
        }
    });
}

self.addEventListener("install", event => {
    self.skipWaiting();
    /*
    async function setkey(){
        const key = await new Promise(resolve => {
            function handler(event){
                if(event.data.key){
                    self.removeEventListener("message", handler, { passive: true });
                    resolve(event.data.key);
                } else {
                    console.warn("static lock key service worker received message without key metadata");
                }
            }

            self.addEventListener("message", handler, { passive: true });
        });
        
        // why is this interface built like this :''''(
        const db = await getdatabase("key");
        const keystore = db.createObjectStore("key");
        keystore.createIndex("data", "data");
        keystore.transaction.oncomplete = () => {
            const key_object_store = db.transaction("customers", "write").objectStore("key");
            key_object_store.add();
        };
    }

    event.waitUntil(setkey());
    */
});

self.addEventListener("activate", (event) => {
    event.waitUntil(clients.claim());
});
